import logging
import textwrap
import uuid

import telegram
from sqlalchemy.orm.exc import NoResultFound
from telegram.ext import MessageHandler
from telegram.ext.filters import Filters

from step_bot.handlers import BaseHandler
from step_bot.models import Chat


class GroupHandler(BaseHandler):
    greetings_text = textwrap.dedent("""\
    
    –ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ—Å—Ç–∞. –í—Å–µ –º—ã –¥–≤–∏–∂–µ–º—Å—è, —á—Ç–æ–±—ã –∂–∏—Ç—å. –ë–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ—Ç –ñ–∏–∑–Ω–∏ –Ω–∏ –≤ —á–∞—Å—Ç–Ω–æ–º, –Ω–∏ –≤ –æ–±—â–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏. –ù–æ —á–∞—Å—Ç–æ –º—ã –∑–∞–±—ã–≤–∞–µ–º –æ–± —ç—Ç–æ–π –ø—Ä–æ—Å—Ç–æ–π –∏—Å—Ç–∏–Ω–µ –∏ –Ω–∞—à–∞ –∂–∏–∑–Ω—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ä—É—Ç–∏–Ω—É –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞-–¥–æ–º-—Ä–∞–±–æ—Ç–∞. 

    –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –≤—ã—Ä–≤–∞—Ç—å—Å—è –∏–∑ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ—á–Ω–æ–≥–æ –∫—Ä—É–≥–∞ –∏ –Ω–∞—á–∞—Ç—å –∂–∏—Ç—å –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤–æ–π, –∞–∫—Ç–∏–≤–Ω–æ–π –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–π —Å–æ–±—ã—Ç–∏—è–º–∏ –∂–∏–∑–Ω—å—é.

    *–ö–∞–∫ –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?*
    - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å—Ç–∞–≤—è—Ç –æ–±—â—É—é –Ω–∞ –≤—Å–µ—Ö —Ü–µ–ª—å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–π—á–∞—Å —ç—Ç–æ 40 000 –∫–º –¥–æ 1 –º–∞—Ä—Ç–∞ 2019 ‚Äì –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤–µ—Å–Ω—ã). –ò –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏, –ø—Ä–æ–±–µ–∂–∞—Ç—å, –ø—Ä–æ–ø–æ–ª–∑—Ç–∏))) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–ª—è —Å–µ–±—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –º–µ—Ä—É —Å–≤–æ–∏—Ö —Å–∏–ª, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. üö∂‚Äç‚ôÄüö∂‚Äç‚ôÇüèÉ‚Äç‚ôÄüèÉ‚Äç‚ôÇ
    - –í –∫–æ–Ω—Ü–µ –¥–Ω—è, –¥–æ 24:00, –º—ã —Å–∫–∏–¥—ã–≤–∞–µ–º —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –∫–æ–º–∞–Ω–¥ (/today –∏ /day) –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä Samsung Health, Apple –ó–¥–æ—Ä–æ–≤—å–µ, Pacer https://play.google.com/store/apps/details?id=cc.pacer.androidapp ) –∏–ª–∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–æ–≤. üì±‚åöÔ∏è
    - –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞, –æ—Ç—á–µ—Ç—ã –≤ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è. –ó–∞ –±–æ—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç @polyn0m, –ø–æ –º–µ—Ä–µ –µ–≥–æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –±—É–¥—É –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤—Å—è–∫–∏–µ –ø–ª—é—à–∫–∏ –∫ –±–æ—Ç—É.
    
    *–î–ª—è —á–µ–≥–æ –≤—Å–µ —ç—Ç–æ –Ω—É–∂–Ω–æ?*
    - –ú—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤ –æ–¥–Ω–æ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –¥–æ–±–∏—Ç—å—Å—è —Ü–µ–ª–∏ –≥–æ—Ä–∞–∑–¥–æ –ø—Ä–æ—â–µ –∏ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –≤ –æ–¥–∏–Ω–æ—á–∫—É. üë¨üë´üë≠
    - –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Å–æ–±–æ–π, —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ —É–ª—É—á—à–∞–µ—Ç —Å–≤–æ–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏—Ö –Ω–µ —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω–æ –¥–ª—è —Å–µ–±—è, –Ω–æ –∏ –¥–ª—è –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

    *–ß—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–∫–∞–∑–∞—Ç—å "–ú—ã –≤–º–µ—Å—Ç–µ –≠—Ç–æ —Å–¥–µ–ª–∞–ª–∏!"* üí™ üèÜüí•üåüüí´
    """)

    def __init__(self, *args, **kwargs):
        super(GroupHandler, self).__init__(*args, **kwargs)

        self.dispatcher.add_handler(MessageHandler(Filters.status_update.chat_created, self.chat_created))
        self.dispatcher.add_handler(MessageHandler(Filters.status_update.migrate, self.chat_migrate))
        self.dispatcher.add_handler(MessageHandler(Filters.status_update.new_chat_members, self.new_member))

    def __create_chat(self, bot, chat_id):
        db_session = self.get_db()

        try:
            db_session.query(Chat).filter(Chat.chat_id == str(chat_id)).one()
        except NoResultFound:
            new_chat = Chat(id=uuid.uuid4(), chat_id=chat_id)

            db_session.add(new_chat)
        finally:
            bot.send_message(
                chat_id=chat_id, text=textwrap.dedent("""\
                –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!

                –ú–µ–Ω—è –∑–æ–≤—É—Ç *%s*, —è –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à —á–∞—Ç!
                –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –¥–ª—è —ç—Ç–æ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!
                """ % bot.first_name), parse_mode=telegram.ParseMode.MARKDOWN
            )

            db_session.commit()

    def __migrate_chat(self, chat_id, new_chat_id):
        db_session = self.get_db()

        try:
            chat = db_session.query(Chat).filter(Chat.chat_id == str(chat_id)).one()

            chat.chat_id = new_chat_id
        except NoResultFound:
            pass
        finally:
            db_session.commit()

    def chat_created(self, bot, update):
        logging.debug('New chat created %s' % update.message.chat_id)

        self.__create_chat(bot, update.message.chat_id)

    def chat_migrate(self, bot, update):
        self.__migrate_chat(update.message.chat_id, update.message.migrate_to_chat_id)

    def new_member(self, bot, update):
        logging.debug('New members in chat %s' % update.message.chat_id)

        members = list(filter(lambda m: not m.is_bot, update.message.new_chat_members))
        i_am = list(filter(lambda m: m.is_bot and m.username == bot.username, update.message.new_chat_members))

        if len(i_am):
            self.__create_chat(bot, update.message.chat_id)

        if len(members) > 1:
            bot.send_message(
                chat_id=update.message.chat_id, text=textwrap.dedent("""\
                *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤—Å–µ—Ö –≤ —á–µ–ª–µ–Ω–¥–∂-–ø—Ä–æ–µ–∫—Ç–µ "–®–∞–≥ –∫ –ú–µ—á—Ç–µ"!* ‚úã {0}
                """.format(self.greetings_text)), parse_mode=telegram.ParseMode.MARKDOWN
            )
        elif len(members) > 0:
            bot.send_message(
                chat_id=update.message.chat_id, text=textwrap.dedent("""\
                *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —á–µ–ª–µ–Ω–¥–∂-–ø—Ä–æ–µ–∫—Ç–µ "–®–∞–≥ –∫ –ú–µ—á—Ç–µ"!* ‚úã {0}
                """.format(self.greetings_text)), parse_mode=telegram.ParseMode.MARKDOWN
            )


class P2PEchoHandler(BaseHandler):
    def __init__(self, *args, **kwargs):
        super(P2PEchoHandler, self).__init__(*args, **kwargs)

        self.dispatcher.add_handler(MessageHandler(Filters.private, self.p2p_warning))

    def p2p_warning(self, bot, update):
        logging.debug('Someone write me in p2p chat, suck it!')

        bot.send_message(
            chat_id=update.message.chat_id, text="""
            –Ø –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤! –¢–∞–∫ —á—Ç–æ –≤–Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É!
            """
        )
